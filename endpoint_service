import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root', // Makes the service available application-wide
})
export class EndpointService {
  getEndpoint(contextRoot: string): string {
    const locationString = window.location.toString();
    if (locationString.includes('local')) {
      return `http://localhost:8082${contextRoot}`;
    } else if (locationString.includes('edso-dev')) {
      return `${environment.apiURLDev}${contextRoot}`;
    } else if (locationString.includes('edso-qaf')) {
      return `${environment.apiURLQaf}${contextRoot}`;
    } else if (locationString.includes('edso-qap')) {
      return `${environment.apiURLQap}${contextRoot}`;
    } else if (locationString.includes('edso-pse')) {
      return `${environment.apiURLPse}${contextRoot}`;
    } else {
      return `${environment.apiURLProd}${contextRoot}`;
    }
  }
}


import { Component, OnInit } from '@angular/core';
import { EndpointService } from '../services/endpoint.service';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css'],
})
export class YourComponent implements OnInit {
  endpoint: string = '';

  constructor(private endpointService: EndpointService) {}

  ngOnInit(): void {
    this.endpoint = this.endpointService.getEndpoint('/your-context-root');
    console.log('Resolved Endpoint:', this.endpoint);
  }
}


import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class EndpointService {
  // Define the environment map directly within the service
  private environmentMap: { [key: string]: string } = {
    local: 'http://localhost:8082',
    'edso-dev': 'https://dev.api.example.com',
    'edso-qaf': 'https://qaf.api.example.com',
    'edso-qap': 'https://qap.api.example.com',
    'edso-pse': 'https://pse.api.example.com',
    'default': 'https://prod.api.example.com',
  };

  // Method to get the endpoint
  getEndpoint(contextRoot: string): string {
    const locationString = window.location.toString();

    // Find the matching environment key
    for (const [key, baseUrl] of Object.entries(this.environmentMap)) {
      if (locationString.includes(key)) {
        return `${baseUrl}${contextRoot}`;
      }
    }

    // Default to production if no match found
    return `${this.environmentMap['default']}${contextRoot}`;
  }
}

